Puma
****
puma -C puma.rb
pumactl -P tmp/puma/pid restart

PGSQL
**************
For logging into Postgres Admin user panel in Mac(where karthikm is the Mac OS username)
sudo psql -U karthikm postgres

CREATE DATABASE spear;
CREATE ROLE spear LOGIN;
ALTER ROLE spear WITH PASSWORD 'spear';

switching DB to SPEAR
# \c spear
Listing DB's
# \l

ALTER DATABASE spear OWNER TO spear;

TESTING
**************
bundle exec rake db:migrate RACK_ENV=test

Active record
**************
bundle exec rake db:create_migration NAME=create_servers

Nginx.conf file
***************
Karthiks-MacBook-Air:tmp karthikm$ cat /usr/local/etc/nginx/sites-enabled/spear.local
upstream spear {
  server unix:////Users/karthikm/www/spear-ver2/tmp/puma/socket;
}

server {
  listen 80;
  server_name spear.local;
  root /Users/karthikm/www/spear-ver2/public;
  access_log  /var/log/nginx/access.log  main;
  error_log  /var/log/nginx/error.log debug;

  location / {
    proxy_pass http://spear;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location ~* ^/assets/ {
    # Per RFC2616 - 1 year maximum expiry
    expires 1y;
    add_header Cache-Control public;

    # Some browsers still send conditional-GET requests if there's a
    # Last-Modified header or an ETag header even if they haven't
    # reached the expiry date sent in the Expires header.
    add_header Last-Modified "";
    add_header ETag "";
    break;
  }
}
Karthiks-MacBook-Air:tmp karthikm$

////////////////////////////////
  $('#probe_interval').ionRangeSlider({
      min: 1,
      max: 60,
      grid: true,
      prefix: 'Every ',
      postfix: ' mins',
      from: 1,
      values: [10, 15, 30, 45, 1, 2, .... 60]
  });
////////////////////////////////

////////////////
// Objectives //
////////////////

1) Website monitoring -
  In addition, customers enjoy Pingdomâ€™s reliability which allows us to filter out false alerts using a second opinion process
  to double-check downtime from another location before we consider the website or application as down.
2) Port monitoring
3) Alerting (incident notification)
  a) Email
  b) SMS - Twilio
  c) Webhooks - (make sure that the domain is not same as the domain to monitor)
4) Charts with mean load-time across period
5) Weekly & Monthly reports
6) Slow response website monitoring

///////////////
// Resources //
///////////////

Forms and listing for Website and Port
Offloading to Redis and Go-lang setup
User Registration
  - bcrypt for Authentication
  - https://github.com/hassox/warden/wiki
User session handling
Alerting

Chart for Spear-ver2 - https://github.com/ankane/chartkick
Range slider - https://github.com/IonDen/ion.rangeSlider - start with mins, Once GO is up and running - change to secs

Spinner - http://stackoverflow.com/a/19365031

http://recipes.sinatrarb.com/p/development/better_errors
sidekiq - https://github.com/mperham/sidekiq/blob/master/examples/sinkiq.rb
DB design
Minispec
CDN - cloudflare
How to use memcached for caching pages
Twilio messaging support
Time in server to be UTC

Two Servers - 1 from India(Digital Ocean) and 1 from Iceland - Europe (AWS)

//////////////////////
// Deployment Tasks //
//////////////////////

1) Change session secret on deployment in the following code. Here secure symbol
stands for SSL(https or http)

set :sessions,
            :httponly     => true,
            :secure       => false,
            :path         => '/',
            :expire_after => 7200,
            :secret       => 'my_long_secret'

2) Persistence in REDIS for background jobs


